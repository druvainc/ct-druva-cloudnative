AWSTemplateFormatVersion: 2010-09-09
Description: AWS Control Tower integration for Druva CloudRanger
################
##  METADATA  ##
################
Metadata:
  QuickStartDocumentation:
    EntrypointName: "Parameters for deploying the AWS Control Tower integration for Druva CloudRanger"
  ParameterGroups:
    - Label:
        default: "Druva CloudRanger configuration"
      Parameters:
        - OrganizationToken
        - OrganizationId
        - OrganizationKeyId
    - Label:
        default: "Deployment configuration"
      Parameters:
        - LaunchAccountList
        - StackRegion
        - StackSetName
        - StackSetUrl
    - Label:
        default: "AWS Quick Start configuration"
      Parameters:
        - QSS3BucketName
        - QSS3KeyPrefix
  ParameterLabels:
    OrganizationToken:
      default: Your organization token.
    OrganizationId:
      default: Your organization ID.
    OrganizationKeyId:
      default: Your organization key ID.
    StackRegion:
      default: The desired region for stack instances to be launched in.
    LaunchAccountList:
      default: Existing AWS account ID list.
    StackSetName:
      default: StackSet name.
    StackSetUrl:
      default: StackSet template URL.
    QSS3BucketName:
      default: Quick Start S3 bucket name.
    QSS3KeyPrefix:
      default: Quick Start S3 key prefix.
################
## PARAMETERS ##
################
Parameters:
  OrganizationToken:
    Type: String
    NoEcho: true
    Description: Organization token. Please retrieve this from the CloudRanger application for your organization
    AllowedPattern: '[0-9]+'
    ConstraintDescription: Organization token has a length of 36 characters, containing letters, numbers and hyphens. (UUID v4)
  OrganizationId:
    Type: String
    NoEcho: true
    Description: Organization ID. Please retrieve this from the CloudRanger application for your organization
    AllowedPattern: '[a-zA-Z0-9]{8}'
    ConstraintDescription: Organization ID has a length of 8 characters, containing letters and numbers.
  OrganizationKeyId:
    Type: String
    NoEcho: true
    Description: Organization key ID. Please retrieve this from the CloudRanger application for your organization
    AllowedPattern: '[0-9]+'
    ConstraintDescription: Organization key ID contains only numbers
  LaunchAccountList:
    Type: String
    Description: Comma separated string of existing (enrolled with Control Tower) AWS account IDs that you wish to protect with CloudRanger. See https://docs.aws.amazon.com/general/latest/gr/acct-identifiers.html
    AllowedPattern: '^$|^(([0-9]){12},)*(([0-9]){12})$'
    ConstraintDescription: LaunchAccountList must be either empty or a comma separated string of AWS account IDs (12 digit number) with no spaces
  StackSetName:
    Type: String
    Description: Druva CloudRanger integration StackSet name
    Default: Druva-CloudRanger-Integration
  StackRegion:
    Type: String
    Description: The desired region to deployed stacks for enrolled accounts into
    Default: us-east-1
  StackSetUrl:
    Type: String
    Default: https://aws-quickstart.s3.amazonaws.com/quickstart-ct-druva-cloudranger/templates/druva-cloudranger-stack-set.yml  # TODO: to be updated by AWS
    Description: Druva CloudRanger integration StackSet template URL
  QSS3BucketName:
    Type: String
    Default: aws-quickstart
    Description: "S3 bucket for Quick Start assets. Use this if you want to customize your deployment. The bucket name can include numbers, lowercase letters, uppercase letters, and hyphens, but it cannot start or end with hyphens (-)."
  QSS3KeyPrefix:
    Type: String
    Default: quickstart-ct-druva-cloudranger/ # TODO: to be updated by AWS
    Description: "S3 key prefix to simulate a directory for Quick Start assets. Use this if you want to customize your deployment. The prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slashes (/). For more information, see https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html."
################
## RESOURCES  ##
################
Resources:
  LambdaZipsBucket:
    Type: AWS::S3::Bucket

  ############################
  ## SECRET MANAGER SECRETS ##
  ############################
  OrganizationTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: The Druva CloudRanger organization token
      Name: DruvaCloudRangerOrganizationToken
      SecretString:
        !Ref 'OrganizationToken'

  OrganizationIdSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: The Druva CloudRanger organization ID
      Name: DruvaCloudRangerOrganizationId
      SecretString:
        !Ref 'OrganizationId'

  OrganizationKeyIdSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: The Druva CloudRanger organization key ID
      Name: DruvaCloudRangerOrganizationKeyId
      SecretString:
        !Ref 'OrganizationKeyId'

  #############################
  ## BUCKET WITH LAMBDA CODE ##
  #############################
  LambdaCodeBucket:
    Type: AWS::S3::Bucket

  #####################################
  ## INVOCATION OF COPY ZIP FUNCTION ##
  #####################################
  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'QSS3BucketName'
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
        - functions/packages/onboarding/<OUR_ZIP_NAME>.zip

  #######################
  ## COPY ZIP FUNCTION ##
  #######################

  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from the S3 bucket to a new location.
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  #########################
  ## ONBOARDING FUNCTION ##
  #########################
  DruvaCloudRangerOnboardingFunction:
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ['', [!Ref 'QSS3KeyPrefix', 'functions/packages/onboarding/DruvaCloudRangerOnboarding.zip']] # TODO: Set path to onboarding zip
      Handler: onboarding.lambda_handler
      Runtime: nodejs14.x
      Timeout: 900
      Environment:
        Variables:
          stackSetName: !Ref StackSetName
          organizationToken: !Ref OrganizationToken
          seedAccounts: !Ref LaunchAccountList
          stackSetUrl: !Ref StackSetUrl
          stackSNS: !Ref DruvaCloudRangerStackSNS
          stackRegion: !Ref StackRegion
      Role: !GetAtt DruvaCloudRangerOnboardingFunctionRole.Arn

  DruvaCloudRangerOnboardingFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Onboarding_Operations
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: StackSetInstanceCreate
            Effect: Allow
            Action:
            - cloudformation:CreateStackInstances
            - cloudformation:ListStackInstances
            Resource:
              !Join ['', ['arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':stackset/',  !Ref StackSetName, '*' ]]
          - Sid: StackSetInstanceDelete
            Effect: Allow
            Action:
            - cloudformation:DeleteStackSet
            - cloudformation:DeleteStackInstances
            - cloudformation:DescribeStackSetOperation
            Resource:
              !Join ['', ['arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':stackset/',  !Ref StackSetName, '*' ]]
          - Sid: StackSetCreate
            Effect: Allow
            Action:
            - cloudformation:CreateStackSet
            - cloudformation:DescribeStackSet
            Resource:
              !Join ['', ['arn:aws:cloudformation:', '*', ':', '*', ':stackset/DruvaCloudRangerFirstLaunch-*' ]]
          - Sid: S3Ops
            Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            Resource:
            - !Join ['',['arn:aws:s3:::', !Ref QSS3BucketName, '/', !Ref QSS3KeyPrefix, '*']]
          - Sid: SNSOps
            Effect: Allow
            Action:
            - sns:Publish
            Resource: !Ref DruvaCloudRangerStackSNS
          - Sid: PassRole
            Effect: Allow
            Action:
            - iam:PassRole
            Resource: !Join [':', ['arn:aws:iam:', !Ref 'AWS::AccountId', 'role/service-role/AWSControlTowerStackSetRole' ]]
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  #############################
  ## FIRST LAUNCH INVOCATION ##
  #############################

  DruvaCloudRangerFirstLaunch:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - DruvaCloudRangerFirstLaunchStackSNSSubscription
    Properties:
      ServiceToken:
        !GetAtt DruvaCloudRangerOnboardingFunction.Arn

  ##############################
  ## STACKSET LAMBDA FUNCTION ##
  ##############################
  DruvaCloudRangerStackSNS:
    Type: AWS::SNS::Topic

  DruvaCloudRangerStackSNSLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DruvaCloudRangerStackSetFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref DruvaCloudRangerStackSNS

  DruvaCloudRangerStackSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt DruvaCloudRangerStackSetFunction.Arn
      Protocol: lambda
      TopicArn: !Ref DruvaCloudRangerStackSNS

  DruvaCloudRangerStackSetFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Register_Operations
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: StackSetInstanceOperations
            Effect: Allow
            Action:
            - cloudformation:CreateStackInstances
            - cloudformation:ListStackInstances
            - cloudformation:ListStackSetOperations
            - cloudformation:DescribeStackSetOperation
            - cloudformation:DeleteStackInstances
            Resource:
              !Join ['', ['arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':stackset/',  !Ref StackSetName, '*' ]]
          - Sid: StackSetOperations
            Effect: Allow
            Action:
            - cloudformation:DescribeStackSet
            Resource:
              !Join ['', ['arn:aws:cloudformation:', '*', ':', '*', ':stackset/DruvaCloudRanger-*' ]]
          - Sid: SNSOps
            Effect: Allow
            Action:
            - sns:Publish
            Resource:
            - !Ref DruvaCloudRangerStackSNS
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  DruvaCloudRangerStackSetFunction:
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ['', [!Ref 'QSS3KeyPrefix', 'functions/packages/stackset/DruvaCloudRangerCTStackSet.zip']]
      Handler: stackset.lambda_handler
      Runtime: nodejs14.x
      Timeout: 120
      ReservedConcurrentExecutions: 1
      Environment:
        Variables:
          stackSetName: !Ref StackSetName
          organizationIdSecretArn: !Ref 'OrganizationIdSecret'
          organizationKeyIdSecretArn: !Ref 'OrganizationKeyIdSecret'
          organizationTokenSecretArn: !Ref 'OrganizationTokenSecret'
          seedAccounts: !Ref LaunchAccountList
          stackSetUrl: !Ref StackSetUrl
          stackSNS: !Ref DruvaCloudRangerStackSNS
          stackRegion: !Ref StackRegion
      Role: !GetAtt DruvaCloudRangerStackSetFunctionRole.Arn

  ##########################
  ## CONTROL TOWER EVENTS ##
  ##########################

  DruvaCloudRangerControlTowerEvents:
    Type: AWS::Events::Rule
    Properties:
      Description: Captures AWS Control Tower LifeCycle events and invokes additional functions.
      EventPattern:
        detail:
          eventName:
          - CreateManagedAccount
          - UpdateManagedAccount
          eventSource:
          - controltower.amazonaws.com
        detail-type:
        - AWS service event via AWS CloudTrail
        source:
        - aws.controltower
      Name: DruvaCloudRangerControlTowerEvents
      State: ENABLED
      Targets:
      - Arn: !GetAtt "DruvaCloudRangerStackSetFunction.Arn"
        Id: IDDruvaCloudRangerControlTowerEvents

  DruvaCloudRangerControlTowerLifeCyclePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "DruvaCloudRangerStackSetFunction.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "DruvaCloudRangerControlTowerEvents.Arn"