{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Integrates Druva CloudRanger with AWS accounts that use AWS Control Tower. This deployment launches as a stack set in your AWS Control Tower landing zone.",
	"Parameters": {
		"OrganizationToken": {
			"Type": "String",
			"NoEcho": true,
			"Description": "Organization token. Please retrieve this from the CloudRanger application for your organization"
		},
		"OrganizationKeyId": {
			"Type": "String",
			"NoEcho": true,
			"Description": "Organization key ID. Please retrieve this from the CloudRanger application for your organization",
			"AllowedPattern": "[0-9]+",
			"ConstraintDescription": "Organization key ID contains only numbers"
		}
	},
	"Resources": {
		"CloudRangerInitializeSNSProvisioner": {
			"Type": "Custom::CloudRangerProvisioner",
			"Version": "1.0",
			"Properties": {
				"ServiceToken": {
					"Fn::Join": [
						"",
						[
							"arn:aws:sns:",
							{
								"Ref": "AWS::Region"
							},
							":558211695259:prod-cloudranger-2-onboarding"
						]
					]
				},
				"OrgToken": {
					"Ref": "OrganizationToken"
				},
				"KeyId": {
					"Ref": "OrganizationKeyId"
				},
				"CRTemplateVersion": "20210524",
				"Region": {
					"Ref": "AWS::Region"
				},
				"AccountId": {
					"Ref": "AWS::AccountId"
				},
				"Step": "Initialize"
			}
		},
		"CloudRanger": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [
						{
							"Action": [
								"sts:AssumeRole"
							],
							"Effect": "Allow",
							"Principal": {
								"AWS": "arn:aws:iam::558211695259:role/cloudranger-v2-prod-lambda"
							},
							"Condition": {
								"StringEquals": {
									"sts:ExternalId": {
										"Fn::GetAtt": [
											"CloudRangerInitializeSNSProvisioner",
											"ExternalId"
										]
									}
								}
							}
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"kms:Decrypt",
										"kms:ListKeyPolicies",
										"kms:GenerateRandom",
										"kms:ListRetirableGrants",
										"kms:GetKeyPolicy",
										"kms:GenerateDataKeyWithoutPlaintext",
										"kms:ListResourceTags",
										"kms:ReEncryptFrom",
										"kms:ListGrants",
										"kms:ListKeys",
										"kms:Encrypt",
										"kms:ListAliases",
										"kms:GenerateDataKey",
										"kms:CreateAlias",
										"kms:ReEncryptTo",
										"kms:DescribeKey",
										"kms:DeleteAlias",
										"kms:CreateGrant",
										"kms:RevokeGrant"
									],
									"Effect": "Allow",
									"Resource": "*"
								}
							]
						},
						"PolicyName": "kmsstatements"
					},
					{
						"PolicyName": "s3statements",
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"s3:CreateBucket",
										"S3:PutBucketAcl",
										"S3:PutEncryptionConfiguration",
										"S3:PutBucketPublicAccessBlock",
										"S3:GetObject",
										"S3:PutObject",
										"S3:PutObjectAcl",
										"S3:DeleteObject",
										"S3:DeleteObjectVersion",
										"s3:PutObjectTagging",
										"S3:PutBucketObjectLockConfiguration",
										"S3:PutBucketVersioning",
										"S3:GetObjectAcl",
										"S3:GetObjectVersion",
										"S3:GetObjectVersionAcl",
										"S3:GetObjectTagging"
									],
									"Effect": "Allow",
									"Resource": [
										"arn:aws:s3:::cloudranger-*"
									]
								},
								{
									"Action": [
										"S3:GetBucketObjectLockConfiguration",
										"S3:GetBucketPublicAccessBlock",
										"S3:GetBucketLocation",
										"S3:HeadBucket",
										"S3:HeadObject",
										"S3:ListBucket",
										"S3:ListAllMyBuckets",
										"S3:ListBucketVersions",
										"S3:ListBucketByTags",
										"S3:CreateJob",
										"S3:DescribeJob",
										"S3:ListJobs"
									],
									"Effect": "Allow",
									"Resource": "*"
								}
							]
						}
					},
					{
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"redshift:authorizeSnapshotAccess",
										"redshift:copyClusterSnapshot",
										"redshift:createClusterSnapshot",
										"redshift:createTags",
										"redshift:deleteClusterSnapshot",
										"redshift:deleteTags",
										"redshift:describeClusters",
										"redshift:describeClusterSnapshots",
										"redshift:describeSnapshotCopyGrants",
										"redshift:describeTags",
										"redshift:revokeSnapshotAccess"
									],
									"Effect": "Allow",
									"Resource": "*"
								}
							]
						},
						"PolicyName": "redshiftStatements"
					},
					{
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"EC2:DescribeInstanceStatus",
										"EC2:CreateVolume",
										"EC2:DeregisterImage",
										"EC2:RegisterImage",
										"EC2:AttachVolume",
										"EC2:DescribeAvailabilityZones",
										"EC2:DescribeSubnets",
										"EC2:DescribeVpcs",
										"EC2:DescribeVpcAttribute",
										"EC2:DescribeVpcEndpoints",
										"EC2:DescribeSecurityGroups",
										"EC2:CreateSnapshot",
										"EC2:CreateSnapshots",
										"EC2:DeleteSnapshot",
										"EC2:DescribeInstances",
										"EC2:DescribeRegions",
										"EC2:DescribeSnapshotAttribute",
										"EC2:DescribeSnapshots",
										"EC2:DescribeTags",
										"EC2:DescribeVolumes",
										"EC2:RebootInstances",
										"EC2:RunInstances",
										"EC2:StartInstances",
										"EC2:StopInstances",
										"EC2:TerminateInstances",
										"EC2:CreateImage",
										"EC2:DescribeImages",
										"EC2:CreateTags",
										"EC2:DeleteTags",
										"EC2:CopyImage",
										"EC2:CopySnapshot",
										"EC2:RunCommand",
										"EC2:ModifySnapshotAttribute",
										"EC2:ModifyImageAttribute"
									],
									"Effect": "Allow",
									"Resource": "*"
								}
							]
						},
						"PolicyName": "eccstatements"
					},
					{
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"EC2:DescribeIamInstanceProfileAssociations",
										"EC2:AssociateIamInstanceProfile",
										"EC2:DisassociateIamInstanceProfile"
									],
									"Effect": "Allow",
									"Resource": "*"
								}
							]
						},
						"PolicyName": "vssstatements"
					},
					{
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"ssm:SendCommand",
										"ssm:DescribeDocument",
										"ssm:ListDocuments",
										"ssm:GetDocument",
										"ssm:ListDocumentVersions",
										"ssm:GetCommandInvocation",
										"ssm:DescribeInstanceInformation"
									],
									"Effect": "Allow",
									"Resource": "*"
								}
							]
						},
						"PolicyName": "ssmstatements"
					},
					{
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"EC2:DescribeKeyPairs",
										"ec2:ModifyVpcAttribute",
										"ec2:ModifySubnetAttribute",
										"ec2:ModifyNetworkInterfaceAttribute",
										"EC2:CreateNetworkInterfacePermission",
										"EC2:describeAddresses",
										"EC2:describeDhcpOptions",
										"EC2:DescribeInternetGateways",
										"EC2:DescribeEgressOnlyInternetGateways",
										"EC2:DescribeNatGateways",
										"EC2:CreateVPC",
										"EC2:DeleteVolume",
										"EC2:DeleteNetworkInterfacePermission",
										"EC2:DeleteVPC",
										"EC2:createSubnet",
										"EC2:deleteSubnet",
										"EC2:CreateRoute",
										"EC2:deleteRoute",
										"ec2:CreateNetworkAcl",
										"ec2:CreateNetworkAclEntry",
										"ec2:DeleteNetworkAcl",
										"ec2:DeleteNetworkAclEntry",
										"EC2:DescribeNetworkAcls",
										"ec2:ReplaceNetworkAclAssociation",
										"ec2:ReplaceNetworkAclEntry",
										"ec2:AllocateAddress",
										"ec2:RevokeSecurityGroupEgress",
										"ec2:RevokeSecurityGroupIngress",
										"ec2:AssociateAddress",
										"ec2:ReleaseAddress",
										"ec2:DisassociateAddress",
										"EC2:CreateRouteTable",
										"EC2:deleteRouteTable",
										"EC2:AssociateRouteTable",
										"EC2:ReplaceRouteTableAssociation",
										"EC2:DisassociateRouteTable",
										"EC2:CreateInternetGateway",
										"ec2:AttachInternetGateway",
										"ec2:DetachInternetGateway",
										"EC2:deleteInternetGateway",
										"EC2:createNatGateway",
										"EC2:deleteNatGateway",
										"EC2:CreateEgressOnlyInternetGateway",
										"EC2:deleteEgressOnlyInternetGateway",
										"EC2:CreateDHCPOptions",
										"EC2:AssociateDHCPOptions",
										"EC2:deleteDHCPOptions",
										"EC2:CreateSecurityGroup",
										"EC2:DeleteSecurityGroup",
										"EC2:AuthorizeSecurityGroupIngress",
										"EC2:AuthorizeSecurityGroupEgress",
										"EC2:DescribeRouteTables",
										"RDS:createSubnetGroup",
										"CloudFormation:createstack",
										"cloudformation:describestacks",
										"cloudformation:describestackevents",
										"cloudformation:ListStackResources",
										"cloudformation:DescribeStackResource",
										"cloudformation:DescribeStackResources",
										"cloudformation:DeleteStack"
									],
									"Effect": "Allow",
									"Resource": "*"
								}
							]
						},
						"PolicyName": "adrstatements"
					},
					{
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"rds:CreateDBSubnetGroup",
										"rds:DeleteDBSubnetGroup",
										"rds:DescribeDBClusterParameterGroups",
										"rds:CreateDBParameterGroup",
										"rds:CreateDBClusterParameterGroup",
										"rds:DeleteDBParameterGroup",
										"rds:DeleteDBClusterParameterGroup",
										"rds:CopyDBParameterGroup",
										"rds:DeleteOptionGroup",
										"rds:DeleteDBInstance",
										"rds:DeleteDBCluster",
										"rds:DescribeDBSecurityGroups",
										"rds:AuthorizeDBSecurityGroupIngress",
										"rds:RevokeDBSecurityGroupIngress",
										"rds:CreateDBSecurityGroup",
										"rds:DeleteDBSecurityGroup",
										"rds:DescribeOptionGroupOptions",
										"rds:CopyOptionGroup",
										"rds:CreateOptionGroup",
										"rds:RestoreDBInstanceFromDBSnapshot",
										"rds:RestoreDBClusterFromSnapshot",
										"rds:CreateDBInstance",
										"rds:DescribeOptionGroups",
										"rds:DescribeDBParameterGroups",
										"rds:DescribeDBSubnetGroups",
										"rds:CreateDBSnapshot",
										"rds:DescribeDBSnapshots",
										"rds:DeleteDBSnapshot",
										"rds:CreateDBClusterSnapshot",
										"rds:DescribeDBClusterSnapshots",
										"rds:DeleteDBClusterSnapshot",
										"rds:DescribeDBInstances",
										"rds:AddTagsToResource",
										"rds:RemoveTagsFromResource",
										"rds:ListTagsForResource",
										"rds:CopyDBSnapshot",
										"rds:CopyDBClusterSnapshot",
										"rds:StopDBInstance",
										"rds:StartDBInstance",
										"rds:ModifyDBSnapshotAttribute",
										"rds:ModifyDBClusterSnapshotAttribute",
										"rds:RestoreDBInstanceFromDBSnapshot",
										"rds:RestoreDBClusterFromDBSnapshot"
									],
									"Effect": "Allow",
									"Resource": "*"
								}
							]
						},
						"PolicyName": "rdsstatements"
					},
					{
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"dynamodb:CreateBackup",
										"dynamodb:BatchGetItem",
										"dynamodb:Describe*",
										"dynamodb:List*",
										"dynamodb:GetItem",
										"dynamodb:Query",
										"dynamodb:Scan",
										"dynamodb:UntagResource",
										"kms:DescribeKey",
										"kms:ListAliases"
									],
									"Effect": "Allow",
									"Resource": "*"
								}
							]
						},
						"PolicyName": "dynamodbbackup"
					},
					{
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"dynamodb:CreateTable",
										"dynamodb:BatchWriteItem",
										"dynamodb:PutItem",
										"dynamodb:DeleteItem",
										"dynamodb:RestoreTableFromBackup",
										"dynamodb:RestoreTableToPointInTime",
										"dynamodb:CreateTableReplica",
										"dynamodb:UpdateItem",
										"dynamodb:DeleteBackup",
										"dynamodb:UpdateTable",
										"dynamodb:TagResource",
										"dynamodb:Scan",
										"dynamodb:Query",
										"dynamodb:GetItem"
									],
									"Effect": "Allow",
									"Resource": "*"
								}
							]
						},
						"PolicyName": "dynamodbrestore"
					},
					{
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"autoscaling:describeAutoScalingGroups",
										"autoscaling:updateAutoScalingGroup"
									],
									"Effect": "Allow",
									"Resource": "*"
								}
							]
						},
						"PolicyName": "autoscalingstatements"
					},
					{
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"iam:ListInstanceProfiles",
										"iam:AddRoleToInstanceProfile",
										"iam:RemoveRoleFromInstanceProfile",
										"iam:ListInstanceProfilesForRole",
										"iam:PassRole",
										"iam:GetInstanceProfile",
										"iam:GetRole",
										"iam:ListAccountAliases",
										"iam:ListAttachedRolePolicies",
										"iam:ListPolicies",
										"iam:AttachRolePolicy"
									],
									"Resource": "*",
									"Effect": "Allow"
								}
							]
						},
						"PolicyName": "iamstatements"
					},
					{
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"s3:restoreObject",
										"s3:GetBucketAcl",
										"s3:GetEncryptionConfiguration",
										"s3:GetLifecycleConfiguration",
										"s3:GetReplicationConfiguration",
										"s3:GetBucketTagging",
										"s3:GetBucketVersioning",
										"s3:GetBucketLogging",
										"s3:GetObjectLockConfiguration",
										"s3:PutBucketVersioning",
										"s3:PutBucketTagging"
									],
									"Resource": "*",
									"Effect": "Allow"
								}
							]
						},
						"PolicyName": "s3archivestatements"
					},
					{
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"tag:GetResources",
										"tag:TagResources"
									],
									"Resource": "*",
									"Effect": "Allow"
								}
							]
						},
						"PolicyName": "tagstatements"
					},
					{
						"PolicyDocument": {
							"Statement": [
								{
									"Action": [
										"s3:GetObject",
										"s3:ListBucket",
										"s3:GetBucketLocation"
									],
									"Resource": [
										{
											"Fn::GetAtt": [
												"CRFileLevelSearchBucket",
												"Arn"
											]
										},
										{
											"Fn::Join": [
												"",
												[
													{
														"Fn::GetAtt": [
															"CRFileLevelSearchBucket",
															"Arn"
														]
													},
													"/*"
												]
											]
										}
									],
									"Effect": "Allow"
								}
							]
						},
						"PolicyName": "flsbucketaccess"
					}
				]
			},
			"DependsOn": [
				"CloudRangerInitializeSNSProvisioner",
				"CRFileLevelSearchBucket"
			]
		},
		"CRConsistentSnapshotPolicy": {
			"Type": "AWS::IAM::ManagedPolicy",
			"Properties": {
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Action": [
								"ec2:createsnapshot",
								"ec2:describeinstances",
								"ec2messages:*",
								"ssm:getdocument",
								"ssm:updateinstanceassociationstatus",
								"ssm:updateinstanceinformation",
								"ssm:listassociations",
								"ssmmessages:*",
								"ssm:ListInstanceAssociations",
								"ec2:createimage"
							],
							"Effect": "Allow",
							"Resource": "*"
						}
					]
				},
				"ManagedPolicyName": {
					"Fn::Join": [
						"",
						[
							"cloudranger-consistent-snapshot-policy-",
							{
								"Fn::GetAtt": [
									"CloudRangerInitializeSNSProvisioner",
									"CRAccountId"
								]
							}
						]
					]
				}
			}
		},
		"CRConsistentSnapshotRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": {
					"Fn::Join": [
						"",
						[
							"cloudranger-consistent-snapshot-role-",
							{
								"Fn::GetAtt": [
									"CloudRangerInitializeSNSProvisioner",
									"CRAccountId"
								]
							}
						]
					]
				},
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"ManagedPolicyArns": [
					{
						"Ref": "CRConsistentSnapshotPolicy"
					}
				]
			},
			"DependsOn": [
				"CRConsistentSnapshotPolicy"
			]
		},
		"CRConsistentSnapshotInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Roles": [
					{
						"Ref": "CRConsistentSnapshotRole"
					}
				],
				"InstanceProfileName": {
					"Fn::Join": [
						"",
						[
							"cloudranger-consistent-snapshot-instance-profile-",
							{
								"Fn::GetAtt": [
									"CloudRangerInitializeSNSProvisioner",
									"CRAccountId"
								]
							}
						]
					]
				}
			},
			"DependsOn": [
				"CRConsistentSnapshotRole"
			]
		},
		"CRFileLevelSearchBucket": {
			"Type": "AWS::S3::Bucket",
			"Properties": {
				"BucketName": {
					"Fn::GetAtt": [
						"CloudRangerInitializeSNSProvisioner",
						"FLSBucketName"
					]
				},
				"NotificationConfiguration": {
					"TopicConfigurations": [
						{
							"Topic": {
								"Fn::Join": [
									"",
									[
										"arn:aws:sns:",
										{
											"Ref": "AWS::Region"
										},
										":558211695259:prod-cloudranger-2-fls-events"
									]
								]
							},
							"Event": "s3:ObjectCreated:*"
						}
					]
				},
				"CorsConfiguration": {
					"CorsRules": [
						{
							"AllowedHeaders": [
								"*"
							],
							"AllowedMethods": [
								"GET"
							],
							"AllowedOrigins": [
								"*"
							],
							"MaxAge": 3000
						}
					]
				}
			},
			"DeletionPolicy": "Delete"
		},
		"CRFileLevelSearchPolicy": {
			"Type": "AWS::IAM::ManagedPolicy",
			"Properties": {
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Action": [
								"s3:PutObject",
								"s3:GetObject",
								"s3:ListBucket"
							],
							"Effect": "Allow",
							"Resource": [
								{
									"Fn::Join": [
										"",
										[
											"arn:aws:s3:::",
											{
												"Fn::GetAtt": [
													"CloudRangerInitializeSNSProvisioner",
													"FLSBucketName"
												]
											}
										]
									]
								},
								{
									"Fn::Join": [
										"",
										[
											"arn:aws:s3:::",
											{
												"Fn::GetAtt": [
													"CloudRangerInitializeSNSProvisioner",
													"FLSBucketName"
												]
											},
											"/*"
										]
									]
								}
							]
						}
					]
				},
				"ManagedPolicyName": {
					"Fn::Join": [
						"",
						[
							"cloudranger-file-level-search-policy-",
							{
								"Fn::GetAtt": [
									"CloudRangerInitializeSNSProvisioner",
									"CRAccountId"
								]
							}
						]
					]
				}
			},
			"DependsOn": [
				"CRFileLevelSearchBucket"
			]
		},
		"CRFileLevelSearchRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": {
					"Fn::Join": [
						"",
						[
							"cloudranger-file-level-search-role-",
							{
								"Fn::GetAtt": [
									"CloudRangerInitializeSNSProvisioner",
									"CRAccountId"
								]
							}
						]
					]
				},
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"ManagedPolicyArns": [
					{
						"Ref": "CRFileLevelSearchPolicy"
					}
				]
			},
			"DependsOn": [
				"CRFileLevelSearchPolicy"
			]
		},
		"CRFileLevelSearchInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Roles": [
					{
						"Ref": "CRFileLevelSearchRole"
					}
				],
				"InstanceProfileName": {
					"Fn::Join": [
						"",
						[
							"cloudranger-file-level-search-instance-profile-",
							{
								"Fn::GetAtt": [
									"CloudRangerInitializeSNSProvisioner",
									"CRAccountId"
								]
							}
						]
					]
				}
			},
			"DependsOn": [
				"CRFileLevelSearchRole"
			]
		},
		"CRS3ArchiveUploadPolicy": {
			"Type": "AWS::IAM::ManagedPolicy",
			"Properties": {
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": [
								"s3:PutObject",
								"s3:PutObjectAcl",
								"s3:PutObjectVersionAcl",
								"s3:PutObjectTagging",
								"s3:PutObjectVersion",
								"s3:GetObject",
								"s3:GetObjectAcl",
								"s3:GetObjectVersionAcl",
								"s3:GetObjectTagging",
								"s3:GetObjectVersion"
							],
							"Resource": [
								"arn:aws:s3:::cloudranger-*/*"
							]
						}
					]
				},
				"ManagedPolicyName": {
					"Fn::Join": [
						"",
						[
							"cloudranger-s3-archive-upload-policy-",
							{
								"Fn::GetAtt": [
									"CloudRangerInitializeSNSProvisioner",
									"CRAccountId"
								]
							}
						]
					]
				}
			}
		},
		"CRS3ArchiveUploadRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": {
					"Fn::Join": [
						"",
						[
							"cloudranger-s3-archive-upload-role-",
							{
								"Fn::GetAtt": [
									"CloudRangerInitializeSNSProvisioner",
									"CRAccountId"
								]
							}
						]
					]
				},
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"ManagedPolicyArns": [
					{
						"Ref": "CRS3ArchiveUploadPolicy"
					}
				]
			},
			"DependsOn": [
				"CRS3ArchiveUploadPolicy"
			]
		},
		"CRS3ArchiveBatchRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": {
					"Fn::Join": [
						"",
						[
							"cloudranger-s3-archive-batch-transition-role-",
							{
								"Fn::GetAtt": [
									"CloudRangerInitializeSNSProvisioner",
									"CRAccountId"
								]
							}
						]
					]
				},
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": "batchoperations.s3.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				},
				"Path": "/",
				"ManagedPolicyArns": [
					{
						"Ref": "CRS3ArchiveBatchPolicy"
					}
				]
			},
			"DependsOn": [
				"CRS3ArchiveBatchPolicy"
			]
		},
		"CRS3ArchiveBatchPolicy": {
			"Type": "AWS::IAM::ManagedPolicy",
			"Properties": {
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Action": [
								"s3:GetBucketLocation",
								"s3:PutObject",
								"s3:PutObjectAcl",
								"s3:PutObjectVersionAcl",
								"s3:PutObjectTagging",
								"s3:GetObject",
								"s3:GetObjectAcl",
								"s3:GetObjectVersionAcl",
								"s3:GetObjectTagging",
								"s3:GetObjectVersion"
							],
							"Effect": "Allow",
							"Resource": [
								"arn:aws:s3:::cloudranger-*/*"
							]
						}
					]
				},
				"ManagedPolicyName": {
					"Fn::Join": [
						"",
						[
							"cloudranger-s3-archive-batch-transition-policy-",
							{
								"Fn::GetAtt": [
									"CloudRangerInitializeSNSProvisioner",
									"CRAccountId"
								]
							}
						]
					]
				}
			}
		},
		"CRS3ArchiveUploadInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Roles": [
					{
						"Fn::Join": [
							"",
							[
								"cloudranger-s3-archive-upload-role-",
								{
									"Fn::GetAtt": [
										"CloudRangerInitializeSNSProvisioner",
										"CRAccountId"
									]
								}
							]
						]
					}
				],
				"InstanceProfileName": {
					"Fn::Join": [
						"",
						[
							"cloudranger-s3-archive-upload-instance-profile-",
							{
								"Fn::GetAtt": [
									"CloudRangerInitializeSNSProvisioner",
									"CRAccountId"
								]
							}
						]
					]
				}
			},
			"DependsOn": [
				"CRS3ArchiveUploadRole"
			]
		},
		"CloudRangerFinalizeSNSProvisioner": {
			"DependsOn": [
				"CloudRangerInitializeSNSProvisioner",
				"CloudRanger",
				"CRConsistentSnapshotPolicy",
				"CRConsistentSnapshotRole",
				"CRConsistentSnapshotInstanceProfile",
				"CRFileLevelSearchBucket",
				"CRFileLevelSearchPolicy",
				"CRFileLevelSearchRole",
				"CRFileLevelSearchInstanceProfile",
				"CRS3ArchiveUploadPolicy",
				"CRS3ArchiveUploadRole",
				"CRS3ArchiveBatchRole",
				"CRS3ArchiveBatchPolicy",
				"CRS3ArchiveUploadInstanceProfile"
			],
			"Type": "Custom::CloudRangerProvisioner",
			"Version": "1.0",
			"Properties": {
				"ServiceToken": {
					"Fn::Join": [
						"",
						[
							"arn:aws:sns:",
							{
								"Ref": "AWS::Region"
							},
							":558211695259:prod-cloudranger-2-onboarding"
						]
					]
				},
				"KeyId": {
					"Ref": "OrganizationKeyId"
				},
				"OrgToken": {
					"Ref": "OrganizationToken"
				},
				"ARN": {
					"Fn::GetAtt": [
						"CloudRanger",
						"Arn"
					]
				},
				"ExternalId": {
					"Fn::GetAtt": [
						"CloudRangerInitializeSNSProvisioner",
						"ExternalId"
					]
				},
				"Region": {
					"Ref": "AWS::Region"
				},
				"AccountId": {
					"Ref": "AWS::AccountId"
				},
				"Step": "Finalize"
			}
		}
	},
	"Outputs": {
		"ARN": {
			"Description": "This is the ARN for the role that you need to save along with your credentials in CloudRanger. https://app.cloudranger.com/#/credential",
			"Value": {
				"Fn::GetAtt": [
					"CloudRanger",
					"Arn"
				]
			}
		},
		"DashboardLink": {
			"Description": "This is the CloudRanger Dashboard link for your new account.",
			"Value": {
				"Fn::GetAtt": [
					"CloudRangerFinalizeSNSProvisioner",
					"LoginLink"
				]
			}
		},
		"Name": {
			"Description": "This is the name of the Role that has been created to give CloudRanger access to your AWS Environment",
			"Value": {
				"Ref": "CloudRanger"
			}
		}
	}
}